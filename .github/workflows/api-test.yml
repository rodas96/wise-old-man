name: (API) Continuous Integration

on:
  push:
    branches:
      - feature/paralel-testing
    paths:
      - "server/**"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.list.outputs.test_files }}
    defaults:
      run:
        working-directory: ./server
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.16.0

      - name: Install dependencies
        run: npm ci

      - name: Run type-checking
        run: npm run build

      - name: List test files
        id: list
        run: |
          TEST_FILES=$(ls __tests__/suites/integration/*.test.ts | jq -R -s -c 'split("\n")[:-1]')
          echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT

  run-tests:
    name: Run ${{ matrix.test_file }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_file: ${{ fromJson(needs.setup.outputs.test_files) }}
    defaults:
      run:
        working-directory: ./server
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Unique Database Name
        id: db
        run: |
          DB_NAME="ci_database_$(echo ${{ matrix.test_file }} | tr -d './_')"
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "Database Name: $DB_NAME"

      - name: Create Isolated Database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE $DB_NAME;"

      - name: Start Redis on Unique Port
        id: redis
        run: |
          TEST_NAME=$(echo "${{ matrix.test_file }}" | tr '/.' '_')
          REDIS_PORT=$((6379 + RANDOM % 1000))
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "Redis Port: $REDIS_PORT"
          docker run -d --name redis_$TEST_NAME -p $REDIS_PORT:6379 redis
      - name: Run Integration Test ${{ matrix.test_file }}
        env:
          CORE_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ env.DB_NAME }}
          REDIS_HOST: localhost
          REDIS_PORT: ${{ env.REDIS_PORT }}
        run: npm test ${{ matrix.test_file }}

      - name: Cleanup Redis Container
        if: always()
        run: docker rm -f redis_${{ matrix.test_file }} || true
