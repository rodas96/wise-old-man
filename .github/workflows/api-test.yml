name: (API) Continuous Integration

on:
  push:
    branches:
      - feature/paralel-testing
    paths:
      - "server/**"

jobs:
  list-tests:
    name: Discover Integration Tests
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.list.outputs.test_files }}
    defaults:
      run:
        working-directory: ./server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List test files
        id: list
        run: |
          TEST_FILES=$(find __tests__/suites/integration -name "*.test.ts" -printf '"%p", ' | sed 's/, $//')
          echo "test_files=[$TEST_FILES]" >> $GITHUB_OUTPUT

  run-tests:
    name: Run ${{ matrix.test_file }}
    needs: list-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_file: ${{ fromJson(needs.list-tests.outputs.test_files) }}
    defaults:
      run:
        working-directory: ./server
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Unique Database Name
        id: db
        run: |
          DB_NAME="ci_database_${{ matrix.test_file }}"
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV

      - name: Create Isolated Database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE $DB_NAME;"

      - name: Start Redis Instance
        id: redis
        run: |
          REDIS_NAME="redis_${{ matrix.test_file }}"
          echo "REDIS_NAME=$REDIS_NAME" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV
          docker run -d --name $REDIS_NAME redis

      - name: Run Integration Test ${{ matrix.test_file }}
        env:
          CORE_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ env.DB_NAME }}
          REDIS_HOST: localhost
        run: npm test ${{ matrix.test_file }}

      - name: Cleanup Redis Container
        if: always()
        run: docker rm -f ${{ env.REDIS_NAME }} || true
